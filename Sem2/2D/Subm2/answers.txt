-----------------------------------------------------------------------
 ------ Informatics 2D - 2015/16 - Second Assignment - Planning ------
-----------------------------------------------------------------------

 Write here you matriculation number (only - your name is not needed)
 Matriculation Number: s1427590


--- Knowledge Base ---

1.1)
Atemporal predicates:
-Agent(agent): agent is an agent
-Car(c): c is a car
-Connected(x,y): locations x is connected to y

Fluents:
-At(x,l,s): object x is at location l at situation s; x can be the agent or a car
-Parked(c,s): c is parked in the parked in the parking lot at situation s ; can only park cars
-Delivered(c,s): c is delivered at situation s

Since connected should work both ways, we will specify which locations are connected in the following way:

Connected(D,Pl)
Connected(Pl,D)
Connected(D,P)
Connected(P,D)

(where D is drop off, Pl is parking lot and P is pick up)


1.2)

We can keep track of the area in which the agent and the cars are at any particular moment by using the relational
fluent At(x,l,s) which is true when object x is at location l in situation s. We would then have At(Agent,l,s) and
At(C,l,s) for the agent A and car C.

1.3)

We can use Parked(C,s) and Delivered(C,s) to express the state of the car. not Parked(C,s) and not Delivered(C,s) would mean the car is not parked in the parking lot and not delivered respctively.


1.4)

Initial state:
Agent(Agent) and Car(C) and Connected(D,Pl) and Connected(Pl,D) and Connected(Pl,P)
and Connected(P,Pl) and At(Agent,D,S0) and At(C,D,S0)

--if something is not mentioned in the kb, model assumes it is false i.e. not Parked(C,s0)

1.5)

Action(Move(from,to),
   Precondition: At(Agent,from,s) and Connected(from,to) => Poss(Move(from,to),s)
   Effect: Poss(Move(x,y),s) => At(Agent,to,Result(Move(from,to),s)))

1.6)
Action(Park(c),
   Precondition: Car(c) and At(Agent,Pl,s) and At(c,Pl,s) => Poss(Park(c),s)
   Effect: Poss(Park(c),s) => Parked(c,Result(Park(c),s)))


1.7)
Action(Drive(c,from,to),
   Precondition: Car(c) and At(Agent,from,s) and At(c,from,s) and Connected(from,to) => Poss(Drive(c,from,to),s)
   Effect: Poss(Drive(c,from,to),s) => At(Agent,to,Result(Drive(c,from,to),s)) and At(c,to,Result(Drive(c,from,to),s)) and not(Parked(c,Result(Drive(c,from,to,s))))

1.8)
Action(Deliver(c),
   Precondition: Car(c) and At(Agent,P,s) and At(c,P,s) => Poss(Deliver(c),s)
   Effect: Poss(Deliver(c),s) => Delivered(c,Result(Deliver(c),s)))

1.9)
The problem is that effect axioms only specify what changes, but fail to specify that everything that isn't changed by an action stays the same.
This problem is known as the Frame problem and can be fixed by introducing successor-state axioms.
STRIPS has a more restrictive way to express states and solves the frame problem by assuming that if an action does not specifically change some feature of the worls, it does not. Each action also includes an add list and a delete list: the add list is a set of statements that gets added to the current state after an action is performed, and the delete list is the set of statements that gets deleted from the current state after the action is performed. In this way, we still include everything that stays unchanged. This is computationally efficient but fails in a world when concurrent actions are allowed.


1.10)


Poss(a,s) => At(x,to,Result(a,s)) <=> (Agent(x) and (a=Move(from,to) or a=Drive(c,from,to) or (At(x,to,s) and a/=Move(to,y) and a/=Drive(c,to,y) ) ) )
                                    or (Car(x) and (a=Drive(x,from,to) or (At(x,to,s) and a/=Drive(x,to,y) and a/=Deliver(x) ) ) )



Poss(a,s) => (Parked(c,Result(a,s)) <=> a=Park(c) or ((Parked(c,s) and a /= Drive(c,x,y)))

Poss(a,s) => (Delivered(c,Result(a,s)) <=> a=Deliver(c) or Delivered(c,s))


1.11)

Converting to CNF:


At successor-state axiom:

Poss(a,s) => At(x,to,Result(a,s)) <=> (Agent(x) and (a=Move(from,to) or a=Drive(c,from,to) or (At(x,to,s) and a/=Move(to,y) and a/=Drive(c,to,y) ) ) )
                                    or (Car(x) and (a=Drive(x,from,to) or (At(x,to,s) and a/=Drive(x,to,y) and a/=Deliver(x) ) ) )

At successor-states axioms in CNF (each clause on a separate line):

(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or Agent(x) or Car(x))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or Agent(x) or a=Drive(x,from,to) or At(x,to,S))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or Agent(x) or a=Drive(x,from,to) or not(a=Drive(x,to,y)))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or Agent(x) or a=Drive(x,from,to) or not(Deliver(x)))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or At(x,to,S) or Car(x))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or At(x,to,S) or a=Drive(x,from,to) or At(x,to,S))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or At(x,to,S) or a=Drive(x,from,to) or not(a=Drive(x,to,y)))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or At(x,to,S) or a=Drive(x,from,to) or not(Deliver(x)))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(Move(to,y)) or Car(x))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(Move(to,y)) or a=Drive(x,from,to) or At(x,to,S))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(Move(to,y)) or a=Drive(x,from,to) or not(a=Drive(x,to,y)))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(Move(to,y)) or a=Drive(x,from,to) or not(Deliver(x)))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(a=Drive(c,to,y)) or Car(x))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(a=Drive(c,to,y)) or a=Drive(x,from,to) or At(x,to,S))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(a=Drive(c,to,y)) or a=Drive(x,from,to) or not(a=Drive(x,to,y)))
(not(Poss(a,s)) or not(At(x,to,Result(a,s))) or a=Move(from,to) or a=Drive(c,from,to) or not(a=Drive(c,to,y)) or a=Drive(x,from,to) or not(Deliver(x)))
(not(Poss(a,s)) or not(Agent(x))or not(a=Move(from,to)) or At(x,to,Result(a,s)))
(not(Poss(a,s)) or not(Agent(x))or not(a=Drive(c,from,to)) or At(x,to,Result(a,s)))
(not(Poss(a,s)) or not(Agent(x))or not(At(x,to,S)) or a=Move(to,y) or a=Drive(c,to,y) or At(x,to,Result(a,s)))
(not(Poss(a,s)) or not(Car(x)) or not(a=Drive(x,from,to)) or At(x,to,Result(a,s)))
(not(Poss(a,s)) or not(Car(x)) or not(At(x,to,S)) or a=Drive(x,to,y) or Deliver(x) or At(x,to,Result(a,s)))

Parked successor-state axioms:

(not(Poss(a,s)) or not(Parked(c,Result(a,s))) or a=Park(c) or Parked(c,s))
(not(Poss(a,s)) or not(Parked(c,Result(a,s))) or a=Park(c) or not(a=Drive(c,x,y)))
(not(Poss(a,s)) or not(a=Park(c)) or Parked(c,Result(a,s)))
(not(Poss(a,s)) or not(Parked(c,s)) or a=Drive(c,x,y) or Parked(c,Result(a,s)))

Delivered successor-state axioms:
not(Poss(a,s)) or (not(Delivered(c,Result(a,s)))) or a=Deliver(c) or Delivered(c,s)
not(Poss(a,s)) or a=Deliver(c) or Delivered(c,Result(a,s))
not(Poss(a,s)) or not(Delivered(c,s)) or Delivered(c,Result(a,s))

--Possibility for park action:
not(Car(c)) or not(At(Agent,Pl,s)) or not(At(c,Pl,s)) or Poss(Park(c),s)


--Possibility for drive action:
not(Car(c)) or not(At(Agent,from,s)) or not(At(c,from,s)) or not(Connected(from,to)) or Poss(Drive(c,from,to),s)


--Possibility for move action:
At(Agent,from,s) or not(Connected(from,to)) or Poss(Move(from,to),s)


--Negation of the goal:

not(Parked(C,s)) (18)


---------------------Resolution Refutation:

We add to the KB all the axioms and the initial state : Agent(Agent) and Car(C) and Connected(D,Pl) and Connected(Pl,D) and Connected(Pl,P)
and Connected(P,Pl) and At(Agent,D,S0) and At(C,D,S0)

From possibility for drive and Car(C)
not(At(Agent,from,s)) or not(At(C,from,s)) or not(Connected(from,to)) or Poss(Drive(C,from,to),s)
Now the above and Connected(D,Pl):
not(At(Agent,D,s)) or not(At(C,D,s)) or Poss(Drive(C,D,Pl),s)
The above and At(Agent,D,S0):
not(At(C,D,S0)) or Poss(Drive(C,D,Pl),S0)
The above and At(C,D,S0):
Poss(Drive(C,D,Pl),S0)

From one of the successor-state axioms for the At fluent
(1): (not(Poss(a,s)) or not(Agent(x)) or not(a=Drive(c,from,to)) or At(x,to,Result(a,s)))
and (2): Poss(Drive(C,D,Pl),S0)
we get (3): not(Agent(x)) or not(Drive(C,D,Pl)=Drive(c,from,to)) or At(x,to,Result(Drive(C,D,Pl)),S0)))
so  not(Agent(x)) or At(x,Pl,Result(Drive(C,D,Pl)),S0)))
using the above and Agent(Agent) gives:
At(Agent,Pl,Result(Drive(C,D,Pl)),S0)))

From the successor-state axiom for the At fluent
(3): (not(Poss(a,s)) or not(Car(x)) or not(a=Drive(x,from,to)) or At(x,to,Result(a,s)))
and (4): Poss(Drive(C,D,Pl),S0)
we get (5): not(Car(x)) or not(Drive(C,D,Pl)=Drive(x,from,to)) or At(x,to,Result(Drive(C,D,Pl)),S0)))
so: not(Car(x)) or At(x,Pl,Result(Drive(C,D,Pl)),S0)))
using the above with Carc(C) gives:
At(C,Pl,Result(Drive(C,D,Pl)),S0)))


We have now obtained At(C,Pl,Result(Drive(C,D,Pl)),S0))) and At(Agent,Pl,Result(Drive(C,D,Pl)),S0))).
We will use the possibility axiom for the Park action : not(Car(c)) or not(At(Agent,Pl,s)) or not(At(c,Pl,s)) or Poss(Park(c),s).
With Car(C) we get:
not(At(Agent,Pl,s)) or not(At(C,Pl,s)) or Poss(Park(C),s).
The above and At(Agent,Pl,Result(Drive(C,D,Pl)),S0))) gives:
not(At(Car,Pl,Result(Drive(C,D,Pl)),S0))) or Poss(Park(C),Result(Drive(C,D,Pl)),S0))
The above and At(C,Pl,Result(Drive(C,D,Pl)),S0))) gives:
Poss(Park(C),Result(Drive(C,D,Pl)),S0))

We use the successor-state axiom for Parked
(6): (not(Poss(a,s)) or not(a=Park(c)) or Parked(c,Result(a,s)))
and the previous result (7): Poss(Park(C),Result(Drive(C,D,Pl)),S0))
to get (8): not(Park(C)=Park(c) or Parked(C,Result(Park(C),Result(Drive(C,D,Pl),S0))))
which gives (9): Parked(C,Result(Park(C),Result(Drive(C,D,Pl),S0)))).

We can now use (9): Parked(C,Result(Park(C),Result(Drive(C,D,Pl),S0))))
and the negated goal (10): not(Parked(C,s)) , s is now Result(Park(C),Result(Drive(C,D,Pl),S0))
which gives the empty clause.

Therefore, the goal can be reached and the plan found is [Drive(C,D,Pl),Park(C)]


--------------------
Answers to parts 2 and 3 should be included in the appropriate domain-*.pl and instance-*.pl files.
